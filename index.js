const puppeteer = require('puppeteer');
const axios     = require('axios');

// === Áí∞Â¢ÉÂ§âÊï∞„ÅÆÂèñÂæóÔºàRender„ÅÆGUI„ÅßË®≠ÂÆöÔºâ===
const TARGET_URL           = process.env.TARGET_URL;
const GAS_WEBHOOK_URL      = process.env.GAS_WEBHOOK_URL;
const TARGET_FACILITY_NAME = process.env.TARGET_FACILITY_NAME || '';
const DAY_FILTER_RAW       = process.env.DAY_FILTER || 'ÂúüÊõúÊó•';
const DATE_FILTER_RAW      = process.env.DATE_FILTER || '';
const CHROME_PATH          = process.env.PUPPETEER_EXECUTABLE_PATH;

// === ÊõúÊó•„Éû„ÉÉ„ÉóÔºàÊó•Êú¨Ë™û ‚Üí Ëã±Ë™ûÔºâ===
const DAY_MAP = {
  'Êó•ÊõúÊó•': 'Sunday',   'ÊúàÊõúÊó•': 'Monday',  'ÁÅ´ÊõúÊó•': 'Tuesday',
  'Ê∞¥ÊõúÊó•': 'Wednesday','Êú®ÊõúÊó•': 'Thursday','ÈáëÊõúÊó•': 'Friday',
  'ÂúüÊõúÊó•': 'Saturday'
};

// === Êó•‰ªòÊ≠£Ë¶èÂåñÈñ¢Êï∞ ===
function normalizeDates(raw) {
  return raw
    .replace(/„ÄÅ/g, ',')
    .split(',')
    .map(d => d.trim())
    .filter(Boolean)
    .map(date => {
      const m = date.match(/^(\d{1,2})Êúà(\d{1,2})Êó•$/);
      if (!m) return null;
      const [, mm, dd] = m;
      return `${mm.padStart(2,'0')}Êúà${dd.padStart(2,'0')}Êó•`;
    })
    .filter(Boolean);
}

const DATE_FILTER_LIST = normalizeDates(DATE_FILTER_RAW);
const DAY_FILTER       = DAY_MAP[DAY_FILTER_RAW] || null;

;(async () => {
  try {
    console.log('üîÑ Launching browser...');
    const browser = await puppeteer.launch({
      headless: 'new',
      executablePath: CHROME_PATH,
      args: ['--no-sandbox','--disable-setuid-sandbox']
    });
    console.log('‚úÖ Browser launched');

    const page = await browser.newPage();
    await page.goto(TARGET_URL, { waitUntil: 'networkidle2', timeout: 60000 });

    // --- reCAPTCHAÔºàÁîªÂÉèË™çË®ºÔºâÊ§úÁü• ---
    const hasAnchor          = await page.$('iframe[src*="/recaptcha/api2/anchor"]');
    const hasImageChallenge = await page.$('iframe[src*="/recaptcha/api2/bframe"], .rc-imageselect');
    if (hasImageChallenge && !hasAnchor) {
      console.warn('üî¥ ÁîªÂÉèË™çË®º„ÉÅ„É£„É¨„É≥„Ç∏Ê§úÁü• ‚Üí Âç≥ÁµÇ‰∫Ü');
      await browser.close();
      return;
    }
    console.log('üü¢ reCAPTCHA „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÅÆ„Åø or none ‚Üí Á∂öË°å');

    // ‚óã„Ç¢„Ç§„Ç≥„É≥„Åå„ÅÇ„Çã„É™„É≥„ÇØ„ÇíÊäΩÂá∫
    const availableDates = await page.evaluate(() =>
      Array.from(document.querySelectorAll('img'))
        .filter(img => img.src.includes('icon_circle.png'))
        .map(img => {
          const a = img.closest('a');
          return a
            ? { href: a.href, label: a.textContent.trim() }
            : null;
        })
        .filter(Boolean)
    );

    const matched = [];

    for (const { href, label } of availableDates) {
      const byDate = DATE_FILTER_LIST.some(d => label.includes(d));
      const byDay  = DAY_FILTER && label.includes(DAY_FILTER_RAW);

      if ((DATE_FILTER_LIST.length > 0 && byDate) ||
          (DATE_FILTER_LIST.length === 0 && byDay)) {

        await page.goto(href, { waitUntil: 'networkidle2', timeout: 60000 });

        // ÂÄãÂà•„Éö„Éº„Ç∏„Åß„ÇÇ reCAPTCHA ÁîªÂÉè„ÉÅ„É£„É¨„É≥„Ç∏Ê§úÁü•
        const innerAnchor = await page.$('iframe[src*="/recaptcha/api2/anchor"]');
        const innerImage  = await page.$('iframe[src*="/recaptcha/api2/bframe"], .rc-imageselect');
        if (innerImage && !innerAnchor) {
          console.warn('üî¥ Ë©≥Á¥∞„Éö„Éº„Ç∏„ÅßÁîªÂÉèË™çË®ºÊ§úÁü• ‚Üí „Çπ„Ç≠„ÉÉ„Éó');
          await page.goBack({ waitUntil: 'networkidle2', timeout: 60000 });
          continue;
        }

        // ÊñΩË®≠„É™„É≥„ÇØ„ÅÆÊúâÁÑ°„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        const facilityFound = await page.evaluate(name =>
          Array.from(document.querySelectorAll('a'))
            .some(a => a.textContent.includes(name))
        , TARGET_FACILITY_NAME);

        if (facilityFound) {
          matched.push(label);
        }
        await page.goBack({ waitUntil: 'networkidle2', timeout: 60000 });
      }
    }

    // „Éû„ÉÉ„ÉÅ„Åå„ÅÇ„Çå„Å∞ Webhook ÈÄÅ‰ø°
    for (const hit of matched) {
      const message =
        `‚úÖ ${DAY_FILTER_RAW}ÔºöÁ©∫„Åç„ÅÇ„Çä„Äå${TARGET_FACILITY_NAME}„Äç\n` +
        `${hit}\n\n${TARGET_URL}`;
      await axios.post(GAS_WEBHOOK_URL, { message });
    }

    await browser.close();
  } catch (err) {
    console.error('‚ùå Exception caught:', err);
    const text = err.stack || err.message || String(err);
    await axios.post(GAS_WEBHOOK_URL, { message: `‚ö†Ô∏è Error occurred:\n${text}` });
    process.exit(1);
  }
})();
