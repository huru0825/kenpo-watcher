const puppeteer = require('puppeteer');
const axios     = require('axios');

// === Áí∞Â¢ÉÂ§âÊï∞„ÅÆÂèñÂæóÔºàRender„ÅÆGUI„ÅßË®≠ÂÆöÔºâ===
const TARGET_URL           = process.env.TARGET_URL;
const GAS_WEBHOOK_URL      = process.env.GAS_WEBHOOK_URL;
const TARGET_FACILITY_NAME = process.env.TARGET_FACILITY_NAME || '';
const DAY_FILTER_RAW       = process.env.DAY_FILTER || 'ÂúüÊõúÊó•';
const DATE_FILTER_RAW      = process.env.DATE_FILTER || '';
const CHROME_PATH          = process.env.PUPPETEER_EXECUTABLE_PATH;

// === env „Éê„É™„Éá„Éº„Ç∑„Éß„É≥ ===
if (!TARGET_URL)      throw new Error('TARGET_URL „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
if (!GAS_WEBHOOK_URL) throw new Error('GAS_WEBHOOK_URL „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
if (!CHROME_PATH)     throw new Error('PUPPETEER_EXECUTABLE_PATH „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');

// === Êó•‰ªòÊ≠£Ë¶èÂåñÈñ¢Êï∞ ===
function normalizeDates(raw) {
  return raw
    .replace(/„ÄÅ/g, ',')
    .split(',')
    .map(d => d.trim())
    .filter(Boolean)
    .map(date => {
      const m = date.match(/^(\d{1,2})Êúà(\d{1,2})Êó•$/);
      return m
        ? `${m[1].padStart(2,'0')}Êúà${m[2].padStart(2,'0')}Êó•`
        : null;
    })
    .filter(Boolean);
}

// === Êó•Êú¨Ë™û‚ÜíËã±Ë™ûÊõúÊó•„Éû„ÉÉ„Éó ===
const DAY_MAP = {
  'Êó•ÊõúÊó•': 'Sunday',
  'ÊúàÊõúÊó•': 'Monday',
  'ÁÅ´ÊõúÊó•': 'Tuesday',
  'Ê∞¥ÊõúÊó•': 'Wednesday',
  'Êú®ÊõúÊó•': 'Thursday',
  'ÈáëÊõúÊó•': 'Friday',
  'ÂúüÊõúÊó•': 'Saturday'
};

const DATE_FILTER_LIST = normalizeDates(DATE_FILTER_RAW);
const DAY_FILTER       = DAY_MAP[DAY_FILTER_RAW] || null;

;(async () => {
  let browser;
  try {
    console.log('üîÑ Launching browser...', CHROME_PATH);
    browser = await puppeteer.launch({
      headless: 'new',
      executablePath: CHROME_PATH,
      args: ['--no-sandbox','--disable-setuid-sandbox','--disable-dev-shm-usage'],
      env: { ...process.env, PUPPETEER_SKIP_DOWNLOAD: 'true' }
    });
    console.log('‚úÖ Browser launched');

    const page = await browser.newPage();
    await page.goto(TARGET_URL, { waitUntil: 'networkidle2', timeout: 60000 });

    // --- reCAPTCHAÔºàÁîªÂÉèË™çË®ºÔºâÊ§úÁü• ---
    const hasAnchor         = await page.$('iframe[src*="/recaptcha/api2/anchor"]');
    const hasImageChallenge = await page.$('iframe[src*="/recaptcha/api2/bframe"], .rc-imageselect');
    if (hasImageChallenge && !hasAnchor) {
      console.warn('üî¥ ÁîªÂÉèË™çË®º„ÉÅ„É£„É¨„É≥„Ç∏Ê§úÁü• ‚Üí Âç≥ÁµÇ‰∫Ü');
      return;
    }
    console.log('üü¢ reCAPTCHA „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÅÆ„Åø or none ‚Üí Á∂öË°å');

    // ‚óã‚óã„Ç¢„Ç§„Ç≥„É≥„Åå„ÅÇ„Çã„É™„É≥„ÇØ„ÇíÊäΩÂá∫
    const availableDates = await page.$$eval(
      'img[src*="icon_circle.png"]',
      (imgs) => imgs.map(img => {
        const a = img.closest('a');
        return a && a.href
          ? { href: a.href, label: a.textContent.trim() }
          : null;
      }).filter(Boolean)
    );

    const matched = [];

    for (const { href, label } of availableDates) {
      const byDate = DATE_FILTER_LIST.some(d => label.includes(d));
      const byDay  = DAY_FILTER && label.includes(DAY_FILTER_RAW);

      if ((DATE_FILTER_LIST.length > 0 && byDate) ||
          (DATE_FILTER_LIST.length === 0 && byDay)) {

        await page.goto(href, { waitUntil: 'networkidle2', timeout: 60000 });

        // Ë©≥Á¥∞„Éö„Éº„Ç∏„Åß„ÅÆÁîªÂÉèË™çË®ºÊ§úÁü•
        const innerAnchor = await page.$('iframe[src*="/recaptcha/api2/anchor"]');
        const innerImage  = await page.$('iframe[src*="/recaptcha/api2/bframe"], .rc-imageselect');
        if (innerImage && !innerAnchor) {
          console.warn('üî¥ Ë©≥Á¥∞„Éö„Éº„Ç∏„ÅßÁîªÂÉèË™çË®ºÊ§úÁü• ‚Üí „Çπ„Ç≠„ÉÉ„Éó');
          await page.goBack({ waitUntil: 'networkidle2', timeout: 60000 });
          continue;
        }

        // ÊñΩË®≠„É™„É≥„ÇØ„ÅÆÊúâÁÑ°„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        const facilityFound = await page.$$eval(
          'a',
          (links, name) => links.some(a => a.textContent.includes(name)),
          TARGET_FACILITY_NAME
        );

        if (facilityFound) {
          matched.push(label);
        }
        await page.goBack({ waitUntil: 'networkidle2', timeout: 60000 });
      }
    }

    // „Éû„ÉÉ„ÉÅ„Åå„ÅÇ„Çå„Å∞ Webhook ÈÄÅ‰ø°
    for (const hit of matched) {
      const message =
        `‚úÖ ${DAY_FILTER_RAW}ÔºöÁ©∫„Åç„ÅÇ„Çä„Äå${TARGET_FACILITY_NAME}„Äç\n` +
        `${hit}\n\n${TARGET_URL}`;
      await axios.post(GAS_WEBHOOK_URL, { message });
    }

  } catch (err) {
    console.error('‚ùå Exception caught:', err);
    const text = err.stack || err.message || String(err);
    await axios.post(GAS_WEBHOOK_URL, { message: `‚ö†Ô∏è Error occurred:\n${text}` });
    process.exit(1);
  } finally {
    if (browser) await browser.close();
  }
})();
