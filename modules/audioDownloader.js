// audioDownloader.js
const fs = require('fs');
const path = require('path');
const { transcribeAudio } = require('./whisper');

async function downloadAudioFromPage(frame) {
  console.log('[reCAPTCHA] üéß Èü≥Â£∞„ÉÅ„É£„É¨„É≥„Ç∏„ÅÆÈü≥Ê∫ê„Çí„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁµåÁî±„Åß„Ç≠„É£„ÉÉ„ÉÅ‰∏≠‚Ä¶');
  const page = frame.page ? frame.page() : frame._page;

  const audioResponse = await page.waitForResponse(
    res =>
      res.url().includes('/recaptcha/api2/payload') &&
      res.headers()['content-type']?.includes('audio/mp3'),
    { timeout: 10000 }
  );
  const audioBuffer = await audioResponse.buffer();

  const tmpDir = path.resolve(__dirname, '../tmp');
  fs.mkdirSync(tmpDir, { recursive: true });

  const filePath = path.join(tmpDir, `audio_${Date.now()}.mp3`);
  fs.writeFileSync(filePath, audioBuffer);
  console.log(`[reCAPTCHA] ‚úÖ Èü≥Â£∞„Éï„Ç°„Ç§„É´‰øùÂ≠òÂÆå‰∫Ü: ${filePath}`);

  return filePath;
}

async function solveRecaptcha(page) {
  // 1. ÂÖ®„Éï„É¨„Éº„É† URL „Çí„É≠„Ç∞Âá∫ÂäõÔºàÁ©∫ÊñáÂ≠óÂàó„ÅØÈô§Â§ñÔºâ
  const frameUrls = page.frames().map(f => f.url()).filter(u => u);
  console.log('[reCAPTCHA] üîç frames:', frameUrls);

  // 2. „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ iframe ÊäΩÂá∫
  const anchorHandle = await page
    .waitForSelector('iframe[src*="/recaptcha/api2/anchor"]', { timeout: 20000 })
    .catch(() => null);
  if (!anchorHandle) return false;
  const checkboxFrame = await anchorHandle.contentFrame();
  if (!checkboxFrame) return false;
  console.log('[reCAPTCHA] ‚úÖ reCAPTCHA„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„ÇπË°®Á§∫Á¢∫Ë™çOK');

  // 3. „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÇØ„É™„ÉÉ„ÇØ
  console.log('[reCAPTCHA] ‚ñ∂ „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÇØ„É™„ÉÉ„ÇØ„ÇíË©¶Ë°å');
  try {
    await checkboxFrame.waitForSelector('.recaptcha-checkbox-border', { timeout: 10000 });
    await checkboxFrame.click('.recaptcha-checkbox-border');
    console.log('[reCAPTCHA] ‚úÖ „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÇØ„É™„ÉÉ„ÇØÊàêÂäü');
  } catch {
    console.error('[reCAPTCHA] ‚ùå „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÇØ„É™„ÉÉ„ÇØÂ§±Êïó');
    return false;
  }

  // 4. challenge Áî® iframe „Çí page.frames().find „ÅßÊüîËªü„Å´ÂèñÂæó
  const challengeFrame = page.frames().find(
    f =>
      (f.url() && f.url().includes('/recaptcha/api2/bframe')) ||
      f.name().startsWith('a-') ||
      (typeof f.title === 'function' && f.title().toLowerCase().includes('recaptcha challenge'))
  );
  if (!challengeFrame) {
    console.error('[reCAPTCHA] ‚ùå „ÉÅ„É£„É¨„É≥„Ç∏Áî®iframeÂèñÂæóÂ§±Êïó');
    return false;
  }
  console.log('[reCAPTCHA] ‚úÖ challenge iframe ÂèñÂæóOK');

  // --- „Éá„Éê„ÉÉ„Ç∞: ÁîªÂÉèË™çË®ºÁîªÈù¢„Çπ„ÇØ„Ç∑„Éß ---
  const debugDir = path.resolve(__dirname, '../tmp');
  fs.mkdirSync(debugDir, { recursive: true });
  const debugShot1 = path.join(debugDir, `challenge-debug-${Date.now()}.png`);
  await page.screenshot({ path: debugShot1, fullPage: true });
  console.log(`[reCAPTCHA] üñºÔ∏è ÁîªÂÉèË™çË®ºÁîªÈù¢„Çπ„ÇØ„Ç∑„Éß: tmp/${path.basename(debugShot1)}`);

  const audioSelectors = [
    'button.rc-button-audio',
    'button.rc-audiochallenge-play-button',
    '#recaptcha-audio-button',
    'button[aria-label="Play audio challenge"]'
  ];

  // Â≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
  async function logExistingSelectors(frame, selectors) {
    for (const sel of selectors) {
      const el = await frame.$(sel);
      console.log(
        el
          ? `[reCAPTCHA] ‚úÖ Â≠òÂú®: '${sel}'`
          : `[reCAPTCHA] ‚ö†Ô∏è Â≠òÂú®„Åó„Å™„ÅÑ: '${sel}'`
      );
    }
  }

  // 5. Èü≥Â£∞ÂàáÊõø„Éú„Çø„É≥„ÇíÈ†ÜÊ¨°Ë©¶Ë°å
  await page.waitForTimeout(15000);
  console.log('[reCAPTCHA] ‚ñ∂ „ÇØ„É™„ÉÉ„ÇØÂèØËÉΩ„Å™„Çª„É¨„ÇØ„Çø„Çí‰∫ãÂâçÁ¢∫Ë™ç„Åó„Åæ„Åô');
  await logExistingSelectors(challengeFrame, audioSelectors);

  console.log('[reCAPTCHA] ‚ñ∂ Èü≥Â£∞ÂàáÊõø„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØË©¶Ë°å');
  let clicked = false;
  const results = [];
  for (const sel of audioSelectors) {
    console.log(`[reCAPTCHA] ‚ñ∂ „Çª„É¨„ÇØ„Çø '${sel}' „ÇíË©¶Ë°å`);
    try {
      await challengeFrame.waitForSelector(sel, { timeout: 5000 });
      await challengeFrame.click(sel);
      console.log(`[reCAPTCHA] ‚úÖ '${sel}' „ÇØ„É™„ÉÉ„ÇØÊàêÂäü`);
      results.push({ selector: sel, success: true });
      clicked = true;
      break;
    } catch (err) {
      console.log(`[reCAPTCHA] ‚ö†Ô∏è '${sel}' Ë©¶Ë°åÂ§±Êïó: ${err.message}`);
      results.push({ selector: sel, success: false });
    }
  }
  if (!clicked) {
    console.error('[reCAPTCHA] ‚ùå „Åô„Åπ„Å¶„ÅÆ„Çª„É¨„ÇØ„Çø„Åß„ÇØ„É™„ÉÉ„ÇØÂ§±Êïó');
    console.table(results);
    return false;
  }

  // 6. Èü≥Â£∞„ÉÅ„É£„É¨„É≥„Ç∏UI„ÅÆÁ¢∫Ë™ç
  console.log('[reCAPTCHA] üîç Èü≥Â£∞„ÉÅ„É£„É¨„É≥„Ç∏UI„ÇíÁ¢∫Ë™ç');
  await page.waitForTimeout(20000);
  try {
    await challengeFrame.waitForSelector(
      '#audio-response, a.rc-audiochallenge-tdownload-link',
      { timeout: 10000 }
    );
    console.log('[reCAPTCHA] ‚úÖ Èü≥Â£∞„ÉÅ„É£„É¨„É≥„Ç∏UIË°®Á§∫Á¢∫Ë™çOK');
  } catch {
    console.error('[reCAPTCHA] ‚ùå Èü≥Â£∞„ÉÅ„É£„É¨„É≥„Ç∏UIË°®Á§∫Á¢∫Ë™çNG');
    const shotFail = path.join(debugDir, `audio-fail-${Date.now()}.png`);
    await page.screenshot({ path: shotFail, fullPage: true });
    console.log(`[reCAPTCHA] üì∑ „Éï„Ç©„Éº„É´„ÉàÁîªÈù¢„Çπ„ÇØ„Ç∑„Éß: tmp/${path.basename(shotFail)}`);
    return false;
  }

  // 7. „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ‚ÜíWhisper‚ÜíÂÖ•Âäõ‚ÜíÊ§úË®º‚Ä¶‰ª•Èôç„ÅØÂ§âÊõ¥„Å™„Åó
  let audioFilePath;
  try {
    audioFilePath = await downloadAudioFromPage(challengeFrame);
    console.log('[reCAPTCHA] ‚úÖ Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÊàêÂäü');
  } catch (err) {
    console.error('[reCAPTCHA] ‚ùå Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÂ§±Êïó:', err);
    return false;
  }

  let text;
  try {
    text = await transcribeAudio(audioFilePath);
    console.log('üìù Ë™çË≠òÁµêÊûú:', text);
  } catch (err) {
    console.error('[reCAPTCHA] ‚ùå Whisper transcription failed:', err);
    return false;
  }

  console.log('[reCAPTCHA] ‚ñ∂ „ÉÜ„Ç≠„Çπ„ÉàÂÖ•Âäõ„ÇíË©¶Ë°å');
  await challengeFrame.type('#audio-response', text.trim(), { delay: 100 });
  const inputValue = await challengeFrame.$eval('#audio-response', el => el.value);
  if (!inputValue) {
    console.error('[reCAPTCHA] ‚ùå „ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÂ§±Êïó');
    return false;
  }
  console.log('[reCAPTCHA] ‚úÖ „ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÊàêÂäü');

  await challengeFrame.click('#recaptcha-verify-button');
  console.log('[reCAPTCHA] ‚úÖ Á¢∫Ë™ç„Éú„Çø„É≥Êäº‰∏ã');

  await page.waitForTimeout(2000);
  const success = await checkboxFrame.evaluate(() =>
    document.querySelector('#recaptcha-anchor[aria-checked="true"]') !== null
  );

  try { fs.unlinkSync(audioFilePath); } catch {}
  return success;
}

module.exports = {
  downloadAudioFromPage,
  solveRecaptcha
};
```Ó®Å0Ó®Ç
